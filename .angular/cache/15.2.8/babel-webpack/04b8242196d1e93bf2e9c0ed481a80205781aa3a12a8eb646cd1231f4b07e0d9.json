{"ast":null,"code":"import { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, GoogleAuthProvider, signInWithPopup, deleteUser } from '@angular/fire/auth';\nimport { onAuthStateChanged } from '@angular/fire/auth';\nimport { collectionData } from '@angular/fire/firestore';\nimport { collection, addDoc, doc, deleteDoc } from '@angular/fire/firestore';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/auth\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/fire/firestore\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(auth, router, firestore) {\n      this.auth = auth;\n      this.router = router;\n      this.firestore = firestore;\n    }\n    //Metodos para usar en componentes\n    iniciarSesion(email, password, google) {\n      if (google) {} else {\n        this.ingresoAuth({\n          email,\n          password\n        }).then(response => {\n          if (response != null) {\n            console.log(response);\n            this.consultaUsuarioFs().subscribe(users => {\n              this.usuarios = users;\n            });\n            for (let i of this.usuarios) {\n              if (email == i.correo) {\n                this.usuario = i;\n              }\n            }\n            localStorage.removeItem(\"usuarioActual\");\n            localStorage.setItem(\"usuarioActual\", JSON.stringify(this.usuario));\n          }\n        }).catch(error => console.log(error));\n      }\n    }\n    registrarUsuario(usuario, google) {\n      if (google) {} else {\n        let email = usuario.correo;\n        let password = usuario.contrasena;\n        this.registroAuth({\n          email,\n          password\n        }).then(response => {\n          if (response != null) {\n            console.log(\"lograo papi\");\n            this.form = new FormGroup({\n              nombre: new FormControl(usuario.nombre),\n              apellido: new FormControl(usuario.apellido),\n              correo: new FormControl(usuario.correo),\n              telefono: new FormControl(usuario.telefono),\n              contrasena: new FormControl(usuario.contrasena),\n              nacimiento: new FormControl(usuario.nacimiento)\n            });\n            this.usuario = usuario;\n            console.log(response);\n            const resp = this.nuevoUsuarioFs(this.form.value);\n            console.log(resp);\n            localStorage.removeItem(\"usuarioActual\");\n            localStorage.setItem(\"usuarioActual\", JSON.stringify(this.usuario));\n          }\n        }).catch(error => {\n          console.log(error);\n          if (error != null) {\n            console.log(\"hay error\");\n          }\n        });\n      }\n    }\n    cerrarSesion() {\n      this.cerrarAuth();\n      localStorage.removeItem(\"usuarioActual\");\n    }\n    //no funciona\n    borrarUsuario(usuario) {\n      let email = usuario.correo;\n      this.cerrarSesion();\n      this.borrarAuth(email).then(response => {\n        console.log(response);\n        this.borrarUsuarioFs(usuario);\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n    //Metodos de Firebase Authentication\n    mostrarAuth() {\n      return String(this.auth.currentUser?.email);\n    }\n    registroAuth({\n      email,\n      password\n    }) {\n      return createUserWithEmailAndPassword(this.auth, email, password);\n    }\n    ingresoAuth({\n      email,\n      password\n    }) {\n      return signInWithEmailAndPassword(this.auth, email, password);\n    }\n    cerrarAuth() {\n      return signOut(this.auth);\n    }\n    borrarAuth({\n      email\n    }) {\n      return deleteUser(email);\n    }\n    sesionAuth(user) {\n      onAuthStateChanged(this.auth, user => {\n        if (user) {\n          this.router.navigate(['/logout']);\n        } else {}\n      });\n    }\n    ingresoGoogleAuth() {\n      return signInWithPopup(this.auth, new GoogleAuthProvider());\n    }\n    //Metodos de Firestore\n    nuevoUsuarioFs(usuario) {\n      const usarioRef = collection(this.firestore, 'usuarios');\n      return addDoc(usarioRef, usuario);\n    }\n    consultaUsuarioFs() {\n      const usuarioRef = collection(this.firestore, 'usuarios');\n      return collectionData(usuarioRef, {\n        idField: 'id'\n      });\n    }\n    borrarUsuarioFs(usuario) {\n      const usuarioRef = doc(this.firestore, `usuarios/${usuario.id}`);\n      return deleteDoc(usuarioRef);\n    }\n    validarUsuario(correo) {\n      this.consultaUsuarioFs().subscribe(users => {\n        this.usuarios = users;\n      });\n      if (this.usuarios != null) {\n        for (let i of this.usuarios) {\n          if (i.correo == correo) {\n            return false;\n          }\n        }\n        return true;\n      } else {\n        return true;\n      }\n    }\n  }\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.Auth), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.Firestore));\n  };\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}